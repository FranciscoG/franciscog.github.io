{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Francisco G.",
	"language": "en",
	"home_page_url": "https://franciscog.com/",
	"feed_url": "https://franciscog.com/feed/feed.json",
	"description": "Developer ordinaire",
	"author": {
		"name": "Francisco",
		"url": "https://franciscog.com/"
	},
	"items": [
		{
			"id": "https://franciscog.com/blog/ffmpeg/",
			"url": "https://franciscog.com/blog/ffmpeg/",
			"title": "Stitching together videos and images with FFmpeg",
			"content_html": "<style>\n    .icon { width: 15px; height: 15px;}\n</style>\n<p>I wanted do a quick write-up about something I figured out with code.</p>\n<p>Back in early January I was trying to create one of those year-end highlight reels you see on social media that quickly goes through a bunch of photos and videos. Google Photos has a feature where you can combine photos and videos into a &quot;movie&quot; but it has a limit of 50 items, I had 124 items ðŸ˜¬. I knew there was a way to do this with FFmpeg but I had never tried it before. So I took a crack at it and it wasn't that hard in the end.</p>\n<p>The data source:</p>\n<ul>\n<li>I had photos in either landscape or portrait mode, all jpg</li>\n<li>I had videos in either landscape or portrait mode, all mp4</li>\n<li>the videos are of varying lengths</li>\n</ul>\n<p>Desired outcome:</p>\n<ul>\n<li>to produce a single video with everything stitched together</li>\n<li>for videos it should only use the first 5 seconds</li>\n<li>output a video in portrait mode with anything in landscape scaled to fit width-wise without cropping, showing black bars above and below, no distortion</li>\n</ul>\n<p>I'm going to start by showing you an example of what the CLI command looks like and then I'll break down and explain each part.</p>\n<p>In this command we are combining 2 videos and 2 images into 1 video.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ffmpeg <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-loop</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> photo1.jpg <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-t</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-i</span> video1.mp4 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-loop</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> photo2.jpg <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-t</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-i</span> video2.mp4 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-f</span> lavfi <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> anullsrc <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-filter_complex</span> <span class=\"token string\">\"\\\n[0:v]scale=1080:-1,setsar=1,pad=1080:1920:0:(oh-ih)/2[v0];\\\n[1:v]scale=1080:-1,setsar=1,pad=1080:1920:0:(oh-ih)/2[v1];\\\n[2:v]scale=1080:-1,setsar=1,pad=1080:1920:0:(oh-ih)/2[v2];\\\n[3:v]scale=1080:-1,setsar=1,pad=1080:1920:0:(oh-ih)/2[v3];\\\n[v0][4:a][v1][1:a][v2][4:a][v3][3:a]concat=n=4:v=1:a=1[v][a]\"</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-map</span> <span class=\"token string\">\"[v]\"</span> <span class=\"token parameter variable\">-map</span> <span class=\"token string\">\"[a]\"</span> <span class=\"token string\">\"output.mp4\"</span></code></pre>\n<p>Lets break this down.</p>\n<h3 id=\"part-1-the-inputs\" tabindex=\"-1\">Part 1: The Inputs <a class=\"header-anchor\" href=\"https://franciscog.com/blog/ffmpeg/#part-1-the-inputs\">#</a></h3>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token parameter variable\">-loop</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> photo1.jpg <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-t</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-i</span> video1.mp4 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-loop</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> photo2.jpg <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-t</span> <span class=\"token number\">5</span> <span class=\"token parameter variable\">-i</span> video2.mp4 <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">-f</span> lavfi <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> anullsrc <span class=\"token punctuation\">\\</span></code></pre>\n<ul>\n<li><code>-loop &lt;duration&gt;</code> - (images only) continually loop the image for the duration <a href=\"https://ffmpeg.org/ffmpeg-formats.html#image2-1\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a></li>\n<li><code>-t &lt;duration&gt;</code> - &quot;When used as an input option (before <code>-i</code>), limit the duration of data read from the input file&quot; <a href=\"https://ffmpeg.org/ffmpeg.html#Main-options\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a>. In the case of a video input, only read the first 5 seconds of the video. For images, loop the images to 1 second.</li>\n<li><code>-i &lt;file&gt;</code> - the input (the file to use)</li>\n</ul>\n<p>This is one is a little different but it's important.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token parameter variable\">-f</span> lavfi <span class=\"token parameter variable\">-t</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-i</span> anullsrc</code></pre>\n<ul>\n<li><code>-f lavfi</code> - use the Libavfilter virtual input device <a href=\"https://ffmpeg.org/ffmpeg-devices.html#lavfi\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a></li>\n<li><code>-t 1</code> - for 1 second</li>\n<li><code>-i anullsrc</code> - creates a null audio source which generates silent audio frames <a href=\"https://ffmpeg.org/ffmpeg-filters.html#anullsrc\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a>. Since the final product is a video, we need an audio track to go along with the images.</li>\n</ul>\n<h3 id=\"part-2-the-filter-complex\" tabindex=\"-1\">Part 2: The -filter_complex <a class=\"header-anchor\" href=\"https://franciscog.com/blog/ffmpeg/#part-2-the-filter-complex\">#</a></h3>\n<p>You'll see this repeated a few times:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token number\">0</span>:v<span class=\"token punctuation\">]</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1080</span>:-1,setsar<span class=\"token operator\">=</span><span class=\"token number\">1</span>,pad<span class=\"token operator\">=</span><span class=\"token number\">1080</span>:1920:0:<span class=\"token punctuation\">(</span>oh-ih<span class=\"token punctuation\">)</span>/2<span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li><code>[0:v]</code> - Select the video input from the file at index 0 (this could be an image or a video)</li>\n<li><code>scale=1080:-1</code> - scales input to 1080px width. The <code>-1</code> means auto-calculate height. This keeps the aspect ratio of the input so it's not distorted.</li>\n<li><code>setsar=1</code> - sets the Sample Aspect Ratio (SAR) of a video to 1:1. This means that each pixel in the video is treated as a perfect square <a href=\"https://ffmpeg.org/ffmpeg-filters.html#setdar_002c-setsar\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a>.</li>\n<li><code>pad=1080:1920</code> - This helps set the output to exactly 1080x1920. By default it will fill with the color black and if an input doesn't cover the space, then this is what will give us the black bars. <a href=\"https://ffmpeg.org/ffmpeg-filters.html#pad-1\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a></li>\n<li><code>0:(oh-ih)/2</code> - the <code>x:y</code> coordinates of where to place the input within the 1080x1920 space.\n<ul>\n<li><code>0</code> - Since we always scale our inputs to 1080, we know the <code>x</code> position will always be 0.</li>\n<li><code>(oh-ih)/2</code> = <code>(output height - input height) / 2</code> - which is the calculation for the <code>y</code> position to get the input vertically centerd</li>\n</ul>\n</li>\n<li><code>[v0]</code> - label the output of this filter for further use in the filter chain.</li>\n</ul>\n<h3 id=\"part-3-the-concat-filter\" tabindex=\"-1\">Part 3: The concat filter <a class=\"header-anchor\" href=\"https://franciscog.com/blog/ffmpeg/#part-3-the-concat-filter\">#</a></h3>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>v0<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span>:a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span>:a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span>:a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span>:a<span class=\"token punctuation\">]</span></code></pre>\n<p>This pairs the labeled video inputs with an audio. You'll notice that <code>[4:a]</code> is used twice. This is a reference to the silent audio track paired with an image input. Remember that we have 5 inputs, 4 files and the 5th one being the generated silent audio. <code>[4:a]</code> refers to that 5th audio input in our 0-indexed inputs array.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token assign-left variable\">concat</span><span class=\"token operator\">=</span>n<span class=\"token operator\">=</span><span class=\"token number\">4</span>:v<span class=\"token operator\">=</span><span class=\"token number\">1</span>:a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span></code></pre>\n<p>This is what concatenates multiple input streams.</p>\n<ul>\n<li><code>concat</code> - is the filter name. <a href=\"https://ffmpeg.org/ffmpeg-filters.html#concat\"><span title=\"documentation\"><i class=\"fa-solid fa-book icon\" aria-hidden=\"true\"></i><span class=\"visually-hidden\">documentation</span></span></a></li>\n<li><code>n=4</code> - specifies that four input segments will be concatenated.</li>\n<li><code>v=1</code> - indicates that one video stream will be in the output.</li>\n<li><code>a=1</code> - specifies that one audio stream will be in the output.</li>\n<li><code>[v][a]</code> are new labels for the output video and audio streams</li>\n</ul>\n<h3 id=\"part-4-map-to-output\" tabindex=\"-1\">Part 4: Map to output <a class=\"header-anchor\" href=\"https://franciscog.com/blog/ffmpeg/#part-4-map-to-output\">#</a></h3>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token parameter variable\">-map</span> <span class=\"token string\">\"[v]\"</span> <span class=\"token parameter variable\">-map</span> <span class=\"token string\">\"[a]\"</span> <span class=\"token string\">\"output.mp4\"</span></code></pre>\n<ul>\n<li><code>-map &quot;[v]&quot;</code> - selects the video stream labeled as <code>[v]</code> from the filter complex output.</li>\n<li><code>-map &quot;[a]&quot;</code> - selects the audio stream labeled as <code>[a]</code> from the filter complex output.</li>\n<li><code>&quot;output.mp4&quot;</code> - the name of our final output file</li>\n</ul>\n<h2 id=\"automate\" tabindex=\"-1\">Automate <a class=\"header-anchor\" href=\"https://franciscog.com/blog/ffmpeg/#automate\">#</a></h2>\n<p>As you can see, the command for just 4 files is not very small. I had 124 files to handle. I wrote a Bash script to help me with this:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\"># Usage: ./concat.sh &lt;folder> &lt;output_file></span>\n<span class=\"token comment\"># Example: ./concat.sh /home/user/videos output.mp4</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$#</span>\"</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Usage: <span class=\"token variable\">$0</span> &lt;folder> &lt;output_file>\"</span>\n    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token assign-left variable\">folder</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n<span class=\"token assign-left variable\">output_file</span><span class=\"token operator\">=</span><span class=\"token variable\">$2</span>\n\n<span class=\"token assign-left variable\">inputs</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">filter_complex</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">concat_filter</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token assign-left variable\">index</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n<span class=\"token assign-left variable\">jpegCount</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">find</span> <span class=\"token string\">\"<span class=\"token variable\">$folder</span>\"</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.jpg\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">mp4Count</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">find</span> <span class=\"token string\">\"<span class=\"token variable\">$folder</span>\"</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*.mp4\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># count all the files because this will be used as the index for the silent audio</span>\n<span class=\"token assign-left variable\">totalFiles</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>jpegCount <span class=\"token operator\">+</span> mp4Count<span class=\"token variable\">))</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Total files: <span class=\"token variable\">$totalFiles</span>\"</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file</span> <span class=\"token keyword\">in</span> <span class=\"token string\">\"<span class=\"token variable\">$folder</span>\"</span>/*<span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">==</span> *.jpg <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token assign-left variable\">inputs</span><span class=\"token operator\">+=</span><span class=\"token string\">\"-loop 1 -t 1 -i <span class=\"token variable\">$file</span> \"</span>\n        <span class=\"token assign-left variable\">concat_filter</span><span class=\"token operator\">+=</span><span class=\"token string\">\"[v<span class=\"token variable\">$index</span>][<span class=\"token variable\">$totalFiles</span>:a]\"</span> <span class=\"token comment\"># [$totalFiles:a] is the silent audio</span>\n    <span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token variable\">$file</span> <span class=\"token operator\">==</span> *.mp4 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n        <span class=\"token assign-left variable\">inputs</span><span class=\"token operator\">+=</span><span class=\"token string\">\"-t 5 -i <span class=\"token variable\">$file</span> \"</span>\n        <span class=\"token assign-left variable\">concat_filter</span><span class=\"token operator\">+=</span><span class=\"token string\">\"[v<span class=\"token variable\">$index</span>][<span class=\"token variable\">$index</span>:a]\"</span>\n    <span class=\"token keyword\">fi</span>\n    <span class=\"token assign-left variable\">filter_complex</span><span class=\"token operator\">+=</span><span class=\"token string\">\"[<span class=\"token variable\">$index</span>:v]scale=1080:-1,setsar=1,pad=1080:1920:0:(oh-ih)/2[v<span class=\"token variable\">$index</span>];\"</span>\n    <span class=\"token assign-left variable\">index</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token variable\">))</span></span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\"># Add silent audio for the images</span>\n<span class=\"token assign-left variable\">inputs</span><span class=\"token operator\">+=</span><span class=\"token string\">\"-f lavfi -t 1 -i anullsrc=channel_layout=stereo:sample_rate=44100 \"</span>\n\n<span class=\"token comment\"># Concatenate all video streams</span>\n<span class=\"token assign-left variable\">concat_filter</span><span class=\"token operator\">+=</span><span class=\"token string\">\"concat=n=<span class=\"token variable\">$index</span>:v=1:a=1[v][a]\"</span>\n\nffmpeg <span class=\"token variable\">$inputs</span> <span class=\"token parameter variable\">-filter_complex</span> <span class=\"token string\">\"<span class=\"token variable\">$filter_complex</span> <span class=\"token variable\">$concat_filter</span>\"</span> <span class=\"token parameter variable\">-map</span> <span class=\"token string\">\"[v]\"</span> <span class=\"token parameter variable\">-map</span> <span class=\"token string\">\"[a]\"</span> <span class=\"token string\">\"<span class=\"token variable\">$output_file</span>\"</span></code></pre>\n<p>That's it! Hope you found this useful and hope I didn't get anything too glaringly wrong. This script worked perfectly for me, but I'm sure there's probably even better and more concise ways of doing it.</p>\n",
			"date_published": "2025-02-28T00:00:00Z"
		}
		
	]
}
